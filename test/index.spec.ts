import { describe, it, assert, beforeAll } from 'vitest'
import { loadKZG } from '../src/index.js'
import { bytesToHex, hexToBytes } from '../src/util.js'

const BYTES_PER_FIELD_ELEMENT = 32
const FIELD_ELEMENTS_PER_BLOB = 4096
const BYTES_PER_BLOB = BYTES_PER_FIELD_ELEMENT * FIELD_ELEMENTS_PER_BLOB
const CELLS_PER_EXT_BLOB = 128
const BYTES_PER_CELL = 2048
const BYTES_PER_G1 = 48

describe('kzg initialization', () => {
  let kzg: any
  beforeAll(async () => {
    kzg = await loadKZG()
  })

  it('should initialize', async () => {
    assert.typeOf(kzg.computeBlobKZGProof, 'function', 'initialized KZG object')
    kzg.freeTrustedSetup()
  })

  it('should throw when invalid trusted setup is provided', () => {
    assert.throws(() => {
      kzg.loadTrustedSetup({ g1_monomial: 'x12',  g1_lagrange: 'bad coordinates', g2_monomial: 'x12'})
    })
  })
})

describe('kzg API tests', () => {
  let kzg: Awaited<ReturnType<typeof loadKZG>>
  beforeAll(async () => {
    kzg = await loadKZG()
    const result = kzg.loadTrustedSetup()
    assert.equal(result, 0, 'loaded trusted setup successfully')
  })

  it('should generate kzg commitments and verify proofs', async () => {
    const blob = new Uint8Array(BYTES_PER_BLOB)
    blob[0] = 0x01
    blob[1] = 0x02
    const commitment = kzg.blobToKZGCommitment(bytesToHex(blob))
    assert.equal(commitment.slice(2).toLowerCase(), 'ab87358a111c3cd9da8aadf4b414e9f6be5ac83d923fb70d8d27fef1e2690b4cad015b23b8c058881da78a05c62b1173')
    const proof = kzg.computeBlobKZGProof(bytesToHex(blob), (commitment))
    assert.equal(proof.toLowerCase(), '0x8dd951edb4e0df1779c29d28b835a2cc8b26ebf69a38d7d9afadd0eb8a4cbffd9db1025fd253e91e00a9904f109e81e3')
    const proofVerified = kzg.verifyBlobKZGProofBatch([bytesToHex(blob)], [(commitment)], [proof])
    assert.equal(proofVerified, true)
  })

  it('should verify kzg proofs with points', async () => {
    const precompileData = {
      Proof: (
        '0xc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
      ),
      Commitment: (
        '0xc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
      ),
      z: (
        '0x623ce31cf9759a5c8daf3a357992f9f3dd7f9339d8998bc8e68373e54f00b75e'
      ),
      y: (
        '0x0000000000000000000000000000000000000000000000000000000000000000'
      ),
    }

    const verifiedKZGProof = kzg.verifyKZGProof(precompileData.Commitment, precompileData.z, precompileData.y, precompileData.Proof)
    assert.equal(verifiedKZGProof, true)
  })

  it('should calculate cells and kzg proofs', async () => {
    // Create a simple test blob with valid field elements
    const blob = new Uint8Array(BYTES_PER_BLOB)
    blob[0] = 0x01
    blob[1] = 0x02
    const blobHex = bytesToHex(blob)

    // Compute cells and proofs for the blob
    const cellsAndProofsHex = kzg.computeCellsAndKZGProofs(blobHex)

    assert(cellsAndProofsHex.proof == "0x81D4F75E60CD7628B00D09E3E5D0F4A64111E76D090106AB49451A796E1BEDF59950080C36E24C759CF929EC59FC0E11")
    assert(cellsAndProofsHex.cells.length == CELLS_PER_EXT_BLOB)
    assert(cellsAndProofsHex.cells[0].startsWith("0x

  })
})
